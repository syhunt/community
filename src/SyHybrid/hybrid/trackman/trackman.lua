TrackerManager = {
 title = 'Issue Tracker Manager',
 filename = 'Issue Trackers'
}

-- Returns the name of the app associated with tracker (Jira, GitHub, etc)
function TrackerManager:GetTrackerApp(name)
  local jsonfile = symini.info.configdir..'\\Tracker\\'..name..'.json'
  local j = ctk.json.object:new()
  local app = ''
  if ctk.file.exists(jsonfile) then
    j:loadfromfile(jsonfile)
  end
  app = j['tracker.defaultapp'] or app
  j:release()
  return app
end

-- Returns a list of trackers by type (Jira, GitHub, Email, etc)
function TrackerManager:gettrackeroptionlist(apptype)
  local list = self:GetIssueTrackerList()
  local menu = ctk.string.list:new()
  local slp = ctk.string.loop:new()
  slp:load(list)
  while slp:parsing() do
    local name = slp.current
    local name_hex = ctk.convert.strtohex(name)
    local app = self:GetTrackerApp(name)
    local canadd = true
    name = ctk.html.escape(name)
    if apptype ~= nil then
      if string.upper(app) ~= string.upper(apptype) then
        canadd = false
      end
    end
    if app == '' then
      canadd = false
    end
    if canadd == true then
      menu:add('<option value="'..name..'">'..name..'</option>')
    end
  end
  local menuhtml = menu.text
  menu:release()
  slp:release()
  return menuhtml
end

function TrackerManager:EditTrackerPreferences(name, app)
  local jsonfile = symini.info.configdir..'\\Tracker\\'..name..'.json'
  local slp = ctk.string.loop:new()
  local hs = symini.hybrid:new()
  hs:start()
  slp:load(hs.options)
  while slp:parsing() do
    prefs.regdefault(slp.current,hs:prefs_getdefault(slp.current))
  end
  local t = {}
  t.html = SyHybrid:getfile('hybrid/prefs_tracker/prefs_'..app:lower()..'.html')
  t.id = 'syhunttrackerprefs'
  t.options = hs.options
  t.jsonfile = jsonfile
  hs:release()
  slp:release()
  return Sandcat.Preferences:EditCustomFile(t)
end

function TrackerManager:SubmitIssue_FromVulnFileList(tracker, filenamelist)
  local app = self:GetTrackerApp(tracker)
  local script = SyHybrid:getfile('hybrid/trackman/sendtask.lua')
  local j = ctk.json.object:new()
  j.tracker = tracker
  j.app = app
  j.filenamelist = filenamelist
  local tid = tab:runtask(script,tostring(j))
  j:release()
end

function TrackerManager:SubmitIssue_FromVulnFile(tracker, filename)
  local trackerapp = self:GetTrackerApp(tracker)
  local issue = {}
  local hs = symini.hybrid:new()
  issue = hs:tracker_getissuebyfilename(filename, trackerapp)
  issue.tracker = tracker
  hs:release()
  self:SubmitIssue(issue)
end

function TrackerManager:SubmitIssue(issue)
  local hs = symini.hybrid:new()
  hs:start()
  local res = hs:tracker_sendissue(issue)
  if res.alreadysent == true then
    app.showmessage('Already sent!')
  else
    if res.success == true then
      app.showmessage('Success! '..res.errormsg)
    else
      app.showmessage('Failed! '..res.errormsg)
    end
  end
  if issue.debug == true then
    app.showalerttext(res.debuglog)
  end
  hs:release()
end

function TrackerManager:TestIssueTracker(name, dbg)
  local issue = {}
  issue.tracker = name
  issue.summary = 'Syhunt Test Issue'
  issue.description = 'This is a test issue generated by Syhunt.'
  issue.debug = dbg
  self:SubmitIssue(issue)
end

function TrackerManager:AddIssueTracker(appname)
  if SyHybridUser:IsOptionAvailable(true) == true then
    local name = app.showinputdialog('Enter name:','')
    name = ctk.file.cleanname(name)
    if name ~= '' then
      local item  = {}
      item.name = name
      item.url = appname
      HistView:AddURLLogItem(item, self.filename)
      self:EditTrackerPreferences(item.name, item.url)
      self:ViewIssueTrackers(false)
    end
  end
end

function TrackerManager:DoIssueTrackerAction(action, itemid)
  local item = HistView:GetURLLogItem(itemid, self.filename)
  if item ~= nil then
    if action == 'editprefs' then
      local ok = self:EditTrackerPreferences(item.name, item.url)
      if ok == true then
        self:ViewIssueTrackers(false)
      end
    end
    if action == 'test' then
      self:TestIssueTracker(item.name, false)
    end
    if action == 'testdebug' then
      self:TestIssueTracker(item.name, true)
    end
    if action == 'delete' then
      HistView:DeleteURLLogItem(itemid,self.filename)
      local jsonfile = symini.info.configdir..'\\Tracker\\'..item.name..'.json'
      ctk.file.delete(jsonfile)      
    end
  end
end

function TrackerManager:GetIssueTrackerList()
  HistView = HistView or Sandcat:require('histview')  
  return HistView:GetURLLogLists(self.filename).namelist
end

function TrackerManager:ViewIssueTrackers(newtab)
 local t = {}
 t.newtab = newtab
 t.toolbar = 'SyHybrid.scx#hybrid/trackman/toolbar.html'
 t.histname = 'Issue Trackers'
 t.tabicon = 'url(SyHybrid.scx#images\\16\\bug_alt.png);'
 t.html = Sandcat:getfile('histview_list.html')
 t.style = [[
  ]]
 t.menu = [[
  <li onclick="TrackerManager:DoIssueTrackerAction('editprefs','%i')">Edit Tracker Preferences...</li>
  <hr/>
  <li onclick="TrackerManager:DoIssueTrackerAction('test','%i')">Submit Test Issue</li>
  <hr/>  
  <li onclick="TrackerManager:DoIssueTrackerAction('testdebug','%i')">Run Debug Test</li>
  <hr/>
  <li onclick="TrackerManager:DoIssueTrackerAction('delete','%i')">Delete</li>
  ]]  
 HistView = HistView or Sandcat:require('histview')  
 HistView:ViewURLLogFile(t)
end